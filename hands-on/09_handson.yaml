heat_template_version: 2015-04-30

description: 9th Hands-on Environment

parameters:
  reposerver:
    type: string
    label: hands-on repository server
    description: Teahcer will gives the specific ip address.

  password:
    type: string
    label: Server password
    description: You set your password on your instances.

resources:
  wait_handle:
    type: OS::Heat::WaitConditionHandle

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 1800

  wait_handle_after_reboot:
    type: OS::Heat::WaitConditionHandle

  wait_condition_after_reboot:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle_after_reboot }
      count: 1
      timeout: 1800

  key_pair:
    type: OS::Nova::KeyPair
    properties:
      name: handson9-key
      save_private_key: true

  floating_network:
    type: OS::Neutron::Net
    properties:
      name: floating-net

  floating_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: floating-subnet
      ip_version: 4
      network_id: { get_resource: floating_network }
      cidr: 172.16.100.0/24
      gateway_ip: 172.16.100.254
      enable_dhcp: False

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: Ext-Router
      subnet: { get_resource: floating_subnet }

#  neutron_port_console:
#    type: OS::Neutron::Port
#    properties:
#      network: work-net
#      fixed_ips:
#        - ip_address: 192.168.199.250
#      security_groups:
#        - open-all

  neutron_port_os_eth0:
    type: OS::Neutron::Port
    properties:
      network: work-net
      fixed_ips:
        - ip_address: 192.168.199.100
      security_groups:
        - open-all

  neutron_port_os_eth1:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: floating_network }
      fixed_ips:
        - ip_address: 172.16.100.100
        - ip_address: 172.16.100.101
        - ip_address: 172.16.100.102
        - ip_address: 172.16.100.103
        - ip_address: 172.16.100.104
      security_groups:
        - open-all

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: public

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: neutron_port_os_eth0 }

  config_set_passwd:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        password: { get_param: password }
        chpasswd: { expire: False }
        ssh_pwauth: True
        timezone: Asia/Tokyo

  config_set_repo:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            __heat_reposerver_ip: { get_param: reposerver }
          template: |
            #!/bin/bash -ex
            echo "__heat_reposerver_ip reposerver" >> /etc/hosts
            rm -f /etc/yum.repos.d/CentOS*
            rm -f /etc/yum.repos.d/epel*
            curl -o /etc/yum.repos.d/edubase.repo http://reposerver/repo/edubase.repo
            yum clean all
            yum repolist

  config_send_notify:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            __heat_wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash -ex
            __heat_wc_notify --data-binary '{"status": "SUCCESS"}'

  config_send_notify_after_reboot:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            wc_notify: { get_attr: ['wait_handle_after_reboot', 'curl_cli'] }
          template: |
            #!/bin/bash -ex
            cat << EOF >> /etc/rc.d/rc.local
            wc_notify --data-binary '{"status": "SUCCESS"}'
            EOF
            chmod u+x /etc/rc.d/rc.local

  config_reboot:
    type: OS::Heat::SoftwareConfig
    properties:
      config: |
        #!/bin/bash -ex
        reboot

#  config_consle:
#    type: OS::Heat::SoftwareConfig
#    properties:
#      config:
#        str_replace:
#          params:
#            _private_key_: { get_attr: [ key_pair, private_key ] }
#          template: |
#            #!/bin/bash -ex
#            yum install -y \
#            python2-novaclient \
#            python2-cinderclient \
#            python2-keystoneclient \
#            python2-neutronclient \
#            python2-glanceclient \
#            python2-swiftclient \
#            python2-heatclient \
#            python-openstackclient \
#            jq \
#            wget \
#            vim \
#            crudini \
#            bash-completion \
#            ansible
# 
#            sudo -u centos wget reposerver/hands-on/openrc -O /home/centos/openrc
# 
#            sudo -u centos cat << _EOF_ > /home/centos/ansible_hosts
#            [localhost]
#            127.0.0.1 ansible_connection=local
# 
#            [openstack-single]
#            192.168.199.100
#            _EOF_
# 
#            sudo -u centos echo "_private_key_" > /home/centos/.ssh/id_rsa
#            chmod 600 /home/centos/.ssh/id_rsa
# 
#            sudo -u centos mkdir -p ./.config/openstack
#            sudo -u centos cat << _EOF_ > /home/centos/.config/openstack/clouds.yaml
#            clouds:
#              topse01:
#                auth:
#                  auth_url: http://192.168.199.10:5000
#                  project_name: admin
#                  username: admin
#                  password: password
#                identity_api_version: '2'
#                region_name: RegionOne
#            _EOF_


  config_openstack:
    type: OS::Heat::SoftwareConfig
    properties:
      config: |
        #!/bin/bash -ex
        yum install -y wget crudini vim bash-completion lynx jq plotnetcfg graphviz
        yum update -y

        rm -f /etc/yum.repos.d/CentOS*
        rm -f /etc/yum.repos.d/epel-*

        echo "options kvm_intel nested=1" > /etc/modprobe.d/kvm-nested.conf
        modprobe -r kvm_intel
        modprobe kvm_intel
        cat /sys/module/kvm_intel/parameters/nested

        cat << EOF > /usr/lib/sysctl.d/00-system.conf
        net.ipv4.ip_forward = 1
        net.ipv4.conf.default.rp_filter = 0
        net.ipv4.conf.all.rp_filter = 0
        net.ipv4.conf.all.forwarding = 1
        EOF

        echo "PermitRootLogin yes" >> /etc/ssh/sshd_config
        sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
        mkdir -p /root/.ssh
        chmod 700 /root/.ssh
        rm -f /root/.ssh/authorized_keys
        cp /home/centos/.ssh/authorized_keys /root/.ssh/authorized_keys
        chmod 600 /root/.ssh/authorized_keys

        yum install -y openstack-packstack openstack-packstack-doc python-netaddr
        export HOME=/root
        packstack --dry-run --allinone --default-password='password' --provision-demo=n --gen-answer-file=/root/answer.txt
        crudini --set /root/answer.txt general CONFIG_NAGIOS_INSTALL n
        crudini --set /root/answer.txt general CONFIG_SWIFT_INSTALL y
        crudini --set /root/answer.txt general CONFIG_HEAT_INSTALL y
        crudini --set /root/answer.txt general CONFIG_CEILOMETER_INSTALL n
        crudini --set /root/answer.txt general CONFIG_KEYSTONE_REGION RegionOne
        crudini --set /root/answer.txt general CONFIG_CINDER_VOLUMES_SIZE 30G
        crudini --set /root/answer.txt general CONFIG_SWIFT_STORAGE_SIZE 3G
        crudini --set /root/answer.txt general CONFIG_NEUTRON_ML2_TYPE_DRIVERS vxlan
        crudini --set /root/answer.txt general CONFIG_NEUTRON_ML2_TENANT_NETWORK_TYPES vxlan
        crudini --set /root/answer.txt general CONFIG_NEUTRON_L3_EXT_BRIDGE br-ex
        crudini --set /root/answer.txt general CONFIG_LBAAS_INSTALL y
        crudini --set /root/answer.txt general CONFIG_NEUTRON_OVS_TUNNEL_IF eth0
        setenforce 0
        packstack --answer-file=/root/answer.txt

        openstack-config --set /etc/cinder/cinder.conf lvm volume_clear none
        openstack-config --set /etc/nova/nova.conf DEFAULT api_rate_limit false
        openstack-config --set /etc/nova/nova.conf libvirt virt_type kvm
        openstack-config --set /etc/nova/nova.conf libvirt cpu_mode host-passthrough
        openstack-config --set /etc/nova/nova.conf DEFAULT novncproxy_host 0.0.0.0
        openstack-config --set /etc/nova/nova.conf DEFAULT novncproxy_port 6080
        openstack-config --set /etc/nova/nova.conf vnc enabled true
        openstack-config --set /etc/nova/nova.conf vnc novncproxy_base_url http://192.168.199.100:6080/vnc_auto.html
        openstack-config --set /etc/nova/nova.conf vnc vncserver_listen 0.0.0.0
        openstack-config --set /etc/nova/nova.conf vnc vncserver_proxyclient_address 192.168.199.100
        openstack-config --set /etc/nova/nova.conf vnc vnc_keymap ja
        echo "dhcp-option-force=26,1400" > /etc/neutron/dnsmasq-neutron.conf

        cat << EOF > /etc/sysconfig/network-scripts/ifcfg-eth1
        DEVICE="eth1"
        BOOTPROT="none"
        ONBOOT="yes"
        TYPE="OVSPort"
        DEVICETYPE="ovs"
        OVS_BRIDGE="br-ex"
        EOF

        cat << EOF > /etc/sysconfig/network-scripts/ifcfg-br-ex
        DEVICE="br-ex"
        BOOTPROT="none"
        ONBOOT="yes"
        TYPE="OVSBridge"
        DEVICETYPE="ovs"
        OVSBOOTPROTO="none"
        OVSDHCPINTERFACES="eth1"
        EOF

  config_example:
    type: OS::Heat::SoftwareConfig
    properties:
      config: |
        #!/bin/bash
        cd /root
        source ./keystone_admin
        function get_uuid () { cat - | grep " id " | awk '{print $4}'; }

        function wait_instance () {
        RETVAL=1
        while [ "$RETVAL" = 1 ]
        do
            echo "#### waiting to boot instance ..."
            sleep 5
            nova show $1 | grep " status " | grep ACTIVE
            RETVAL=$?
        done
        }

        function wait_volume () {
        RETVAL=1
        while [ "$RETVAL" = 1 ]
        do
            echo "#### waiting to create bootable volume ..."
            sleep 5
            cinder show $1 | grep " status " | grep available
            RETVAL=$?
        done
        }

        echo "## creating image"
        wget http://reposerver/images/CentOS-7-x86_64-GenericCloud.qcow2

        openstack image create \
                  --container-format bare --disk-format qcow2 \
                  --min-disk 10 --min-ram 1024 --public \
                  --file CentOS-7-x86_64-GenericCloud.qcow2 \
                  CentOS7

        echo "## creating flavor"
        openstack flavor create --public --id 99 --vcpus 1 --ram 1024 \
                  --disk 10 --ephemeral 0 --swap 0 \
                  my.standard

        echo "## creating public network"
        neutron net-create --router:external public
        neutron subnet-create --name public-subnet \
                --allocation-pool start=172.16.100.101,end=172.16.100.104 \
                --disable-dhcp \
                --gateway 172.16.100.254 \
                public 172.16.100.0/24

        echo "## creating keypair"
        openstack keypair create temp-key-1 | tee /root/temp-key-1.pem
        chmod 600 /root/temp-key-1.pem

        echo "## creating security group"
        neutron security-group-create open-all --description "allow all communications"
        neutron security-group-rule-create --direction ingress --ethertype IPv4 \
                --protocol icmp \
                --remote-ip-prefix 0.0.0.0/0 open-all
        neutron security-group-rule-create --direction ingress --ethertype IPv4 \
                --protocol tcp --port-range-min 1 --port-range-max 65535 \
                --remote-ip-prefix 0.0.0.0/0 open-all
        neutron security-group-rule-create --direction ingress --ethertype IPv4 \
                --protocol udp --port-range-min 1 --port-range-max 65535 \
                --remote-ip-prefix 0.0.0.0/0 open-all

        echo "## creating routers"
        neutron router-create Ext-Router
        neutron router-create Closed-Router
        neutron router-gateway-set Ext-Router public

        echo "## creating 1st network"
        neutron net-create work-net
        neutron subnet-create --ip-version 4 --gateway 10.10.10.254 \
                --name work-subnet --dns-nameserver 8.8.8.8 --dns-nameserver 8.8.4.4 \
                work-net 10.10.10.0/24
        neutron router-interface-add Ext-Router work-subnet

        echo "## creating 2nd network"
        neutron net-create 2nd-net
        neutron subnet-create --ip-version 4 --gateway 10.20.20.254 --name 2nd-subnet --dns-nameserver 8.8.8.8 --dns-nameserver 8.8.4.4 2nd-net 10.20.20.0/24
        neutron router-interface-add Ext-Router 2nd-subnet
        sleep 3

        echo "## creating 3rd network"
        neutron net-create 3rd-net
        neutron subnet-create --ip-version 4 --gateway 10.30.30.254 --name 3rd-subnet 3rd-net 10.30.30.0/24
        neutron router-interface-add Closed-Router 3rd-subnet
        sleep 3

        export MY_WORK_NET=`neutron net-show work-net -c id | get_uuid`
        export MY_2ND_NET=`neutron net-show 2nd-net   -c id | get_uuid`
        export MY_3RD_NET=`neutron net-show 3rd-net   -c id | get_uuid`
        sleep 3

        echo "## creating boot volume"
        IMAGEID=`openstack image show "CentOS7" | get_uuid`
        cinder create --display-name boot-vol --image-id $IMAGEID 10

        wait_volume boot-vol

        VOLID=`cinder show boot-vol | grep " id " | get_uuid`

        echo "## creating snapshot & volume"
        cinder snapshot-create --display-name boot-vol-snap $VOLID
        SNAPID=`cinder snapshot-show boot-vol-snap | get_uuid`
        cinder create --snapshot-id $SNAPID --display-name copy-snap-vol 10

        echo "## booting instance"
        nova boot --flavor my.standard --image "CentOS7" \
                  --key-name temp-key-1 --security-groups open-all \
                  --nic net-id=${MY_WORK_NET} \
        test-vm-1
        wait_instance test-vm-1

        nova boot --flavor my.standard --image "CentOS7" \
                  --key-name temp-key-1 --security-groups open-all \
                  --nic net-id=${MY_2ND_NET} --nic net-id=${MY_3RD_NET} \
        test-vm-2
        wait_instance test-vm-2

        nova boot --flavor my.standard --boot-volume $VOLID \
                  --key-name temp-key-1 --security-groups open-all \
                  --nic net-id=${MY_3RD_NET} \
        test-vm-3
        wait_instance test-vm-3

        echo "## associating FIP"
        export FIP=`nova floating-ip-create public | grep public |grep "[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+" | awk -e '{print $4}'`
        nova floating-ip-associate test-vm-1 ${FIP}

        export FIP=`nova floating-ip-create public | grep public |grep "[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+" | awk -e '{print $4}'`
        nova floating-ip-associate test-vm-2 ${FIP}

        echo "#########"
        echo "## done !"
        echo "#########"



#  server_init_console:
#    type: OS::Heat::MultipartMime
#    properties:
#      parts:
#      - config: { get_resource: config_set_passwd }
#      - config: { get_resource: config_set_repo }
#      - config: { get_resource: config_consle }
#      - config: { get_resource: config_send_notify }
#      - config: { get_resource: config_send_notify_after_reboot }
#      - config: { get_resource: config_reboot }

  server_init_openstack:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: config_set_passwd }
      - config: { get_resource: config_set_repo }
      - config: { get_resource: config_openstack }
      - config: { get_resource: config_send_notify }
      - config: { get_resource: config_example }
      - config: { get_resource: config_send_notify_after_reboot }
      - config: { get_resource: config_reboot }

#  instance_console:
#    type: OS::Nova::Server
#    properties:
#      name: handson9-console
#      image: CentOS7
#      flavor: m1.small
#      key_name: { get_resource: key_pair }
#      networks:
#        - port: { get_resource: neutron_port_console }
#      user_data_format: RAW
#      user_data: { get_resource: server_init_console }

  instance_openstack:
    type: OS::Nova::Server
    properties:
      name: handson9-openstack-single
      image: CentOS7
      flavor: m1.large
      key_name: { get_resource: key_pair }
      networks:
        - port: { get_resource: neutron_port_os_eth0 }
        - port: { get_resource: neutron_port_os_eth1 }
      user_data_format: RAW
      user_data: { get_resource: server_init_openstack }

outputs:
#  instance1:
#    description: server information
#    value:
#      name: { get_attr: [ instance_console, name ] }
#      ip_address: { get_attr: [ neutron_port_console, fixed_ips, 0, ip_address ] }
#      floating_ip: { get_attr: [floating_ip, floating_ip_address] }
  instance:
    description: server information
    value:
      name: { get_attr: [ instance_openstack, name ] }
      ip_address: { get_attr: [ neutron_port_os_eth0, fixed_ips, 0, ip_address ] }
      floating_ip: { get_attr: [floating_ip, floating_ip_address] }
  password:
    description: server password for user "centos"
    value: { get_param: password }
  private_key:
    description: private key for user "centos"
    value: { get_attr: [ key_pair, private_key ] }
