heat_template_version: 2018-08-31

description: Setup default handson environment.

parameters:
  password:
    type: string
    label: Server password
    description: You set your password on your instances. It will be used by user centos

  boot_image:
    type: string
    default: CentOS8-base

resources:
  secg:
    type: OS::Neutron::SecurityGroup
    properties:
      name: open-all
      rules:
        - protocol: icmp
          remote_ip_prefix: 0.0.0.0/0
        - protocol: tcp
          port_range_min: 1
          port_range_max: 65535
          remote_ip_prefix: 0.0.0.0/0
        - protocol: udp
          port_range_min: 1
          port_range_max: 65535
          remote_ip_prefix: 0.0.0.0/0

  private_network:
    type: OS::Neutron::Net
    properties:
      name: work-net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: work-subnet
      ip_version: 4
      network_id: { get_resource: private_network }
      cidr: 192.168.199.0/24
      gateway_ip: 192.168.199.254
      dns_nameservers:
        - 8.8.8.8
        - 8.8.4.4

  ext_router:
    type: OS::Neutron::Router
    properties:
      name: Ext-Router
      external_gateway_info:
        network: public

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: ext_router }
      subnet_id: { get_resource: private_subnet }

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 600

  key_pair:
    type: OS::Nova::KeyPair
    properties:
      name: key-for-console
      save_private_key: true

  neutron-port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: private_network }
      fixed_ips:
        - ip_address: 192.168.199.250
      security_groups:
        - { get_resource: secg }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: public

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    depends_on: router_interface
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: neutron-port }

  config_set_passwd:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        password: { get_param: password }
        chpasswd: { expire: False }
        ssh_pwauth: True
        timezone: Asia/Tokyo

  config_init_config:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $_private_key_: { get_attr: [ key_pair, private_key ] }
            $_public_key_: { get_attr: [ key_pair, public_key ] }
            $__heat_wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash -ex
            for i in $(seq 1 10); do
              echo "check the reposerver connection: count $i"
              if ping -c 1 reposerver &> /dev/null
              then
                REPO_CON=0
                break
              else
                REPO_CON=1
              fi
              sleep 1
            done

            if [ "$REPO_CON" == "1" ]; then
              $__heat_wc_notify --data-binary '{"status": "FAILURE"}'
              exit 1
            fi

            dnf install -y \
            python3-openstackclient \
            python3-heatclient \
            jq wget vim crudini bash-completion git
            openstack complete > /etc/bash_completion.d/osc.bash_completion

            wget reposerver/hands-on/openrc -O /home/centos/openrc
            chown centos:centos /home/centos/openrc

            wget reposerver/hands-on/support.sh -O /home/centos/support.sh
            chown centos:centos /home/centos/support.sh

            echo "$_private_key_" > /home/centos/.ssh/id_rsa
            echo "$_public_key_" > /home/centos/.ssh/id_rsa.pub
            chown centos:centos /home/centos/.ssh/id_rsa
            chown centos:centos /home/centos/.ssh/id_rsa.pub
            chmod 600 /home/centos/.ssh/id_rsa
            chmod 644 /home/centos/.ssh/id_rsa.pub
            echo "source ~/openrc" >> /home/centos/.bashrc
            echo "source ~/support.sh" >> /home/centos/.bashrc

  config_send_notify_after_settings:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $__heat_wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash -ex
            $__heat_wc_notify --data-binary '{"status": "SUCCESS"}'

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: config_set_passwd }
      - config: { get_resource: config_init_config }
      - config: { get_resource: config_send_notify_after_settings }

  instance:
    type: OS::Nova::Server
    properties:
      name: console
      image: { get_param: boot_image }
      flavor: m1.small
      key_name: { get_resource: key_pair }
      networks:
        - port: { get_resource: neutron-port }
      user_data_format: RAW
      user_data: { get_resource: server_init }

outputs:
  info:
    description: console server information
    value:
      name: { get_attr: [ instance, name ] }
      ip_address: { get_attr: [ neutron-port, fixed_ips, 0, ip_address ] }
      floating_ip: { get_attr: [floating_ip, floating_ip_address] }
      password: { get_param: password }
      private_key: { get_attr: [ key_pair, private_key ] }
