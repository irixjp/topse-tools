heat_template_version: 2015-04-30

description: |
  This template create etherpad server on centos7
  You need to give "reposerver" ip address to use this template.
  $ heat stack-create -f this_file -P 'reposerver=xx.xx.xx.xx' etherpad

parameters:
  public_network:
    type: string
    label: Public network name or ID
    description: Public network with floating IP addresses.
    default: public

  private_network:
    type: string
    label: Internal network name
    description: Internal network name or ID as a work-net.
    default: tools-net

  sec_group:
    type: string
    label: Security group name for console server
    description: Security group name for console server.
    default: sg-for-tools

  image:
    type: string
    label: Image name or ID
    description: Image to be used for the server.
    default: Docker

  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used on the compute instance.
    default: m1.small

  key:
    type: string
    default: key-for-etherpad

  instance_name:
    type: string
    default: etherpad

  reposerver:
    type: string
    description: you need to give a specified IP address to connect to reposerver by -P options

resources:
  wait_handle:
    type: OS::Heat::WaitConditionHandle

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 1800

  wait_handle_after_reboot:
    type: OS::Heat::WaitConditionHandle

  wait_condition_after_reboot:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle_after_reboot }
      count: 1
      timeout: 1800

  key_pair:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: key }
      save_private_key: true

  neutron-port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_network }
      security_groups:
        - { get_param: sec_group }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: neutron-port }

  passwd:
    type: OS::Heat::RandomString
    properties:
      length: 12
      sequence: lettersdigits

  config_set_passwd:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        password: { get_attr: [passwd, value] }
        chpasswd: { expire: False }
        ssh_pwauth: True
        timezone: Asia/Tokyo

  config_etherpad:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            wc_reposerver_ip: { get_param: reposerver }
            wc_external_ip: { get_attr: [floating_ip, floating_ip_address] }
          template: |
            #!/bin/bash -ex
            ################
            ## set repogitry
            ################
            mkdir -p /root/temp
            echo "wc_reposerver_ip reposerver" >> /etc/hosts
            mv /etc/yum.repos.d/* /root/temp
            cd /etc/yum.repos.d
            curl -o /etc/yum.repos.d/edubase.repo http://reposerver/repo/edubase.repo
            yum clean all
            yum repolist
            docker run -itd --name epmysql --expose 3306 enakai00/epmysql:ver1.0
            sleep 10
            docker run -itd --name eplite -p 80:80 -e FIP=wc_external_ip --link epmysql:db enakai00/eplite:ver1.0
            echo "### finish!! ###"

  config_send_notify_after_settings:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash -ex
            wc_notify --data-binary '{"status": "SUCCESS"}'

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: config_set_passwd }
      - config: { get_resource: config_etherpad }
      - config: { get_resource: config_send_notify_after_settings }

  instance:
    type: OS::Nova::Server
    properties:
      name: { get_param: instance_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_resource: key_pair }
      networks:
        - port: { get_resource: neutron-port }
      user_data_format: RAW
      user_data: { get_resource: server_init }

outputs:
  instance_name:
    description: Name of the instance
    value: { get_attr: [instance, name] }
  floating_ip:
    description: The IP address of the deployed instance
    value: { get_attr: [floating_ip, floating_ip_address] }
  private_key:
    description: Private Key of generated keypair
    value: { get_attr: [key_pair, private_key] }
  password:
    value: { get_attr: [passwd, value] }
